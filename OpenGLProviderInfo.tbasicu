uses "TBGL"

%GL_VENDOR                          = &H1F00
%GL_RENDERER                        = &H1F01
%GL_VERSION                         = &H1F02
%GL_EXTENSIONS                      = &H1F03

declare function glGetString lib "opengl32.dll" alias "glGetString" (byVal nName as DWord) as asciiz ptr

type OpenGLProviderInfo
  private
  
  cachedVendor          as string
  cachedRenderer        as string
  cachedApiVersion      as string
  cachedExtensions      as string
  cachedExtensionTypes  as string
  
  function getVendor() as string
    dim vendor as asciiz * 255 at glGetString(%GL_VENDOR)
    return vendor
  end function
  
  function getRenderer() as string
    dim renderer as asciiz * 255 at glGetString(%GL_RENDERER)
    return renderer
  end function
  
  function getVersion() as string
    dim oglVersion as asciiz * 255 at glGetString(%GL_VERSION)
    return oglVersion
  end function
  
  function getExtensions() as string  
    string extensions = peek$(asciiz, glGetString(%GL_EXTENSIONS), 16384)
    extensions = trim$(extensions, $spc)
    extensions = replace$(extensions, " ", ",")
    
    return ucase$(extensions)
  end function
  
  function getExtensionTypes() as string
    string extensions()
    parse(me.getExtensions(), extensions, ",")
    long i

    string detectedType, extensionTypes
    for i = 1 to countOf(extensions)
      detectedType = parse$(extensions(i), "_", 2) + ","
      if instr(extensionTypes, detectedType) = 0 then
        extensionTypes += detectedType
      end if
    next
    extensionTypes = rtrim$(extensionTypes, ",")
    
    return extensionTypes
  end function  
  
  public
  
  function _Create()
    tbgl_createWindowEx("TBGL", 1, 1, 32, %TBGL_WS_WINDOWED) 
    tbgl_showWindow  
    
    me.cachedVendor         = me.getVendor()
    me.cachedRenderer       = me.getRenderer()
    me.cachedApiVersion     = me.getVersion()
    me.cachedExtensions     = me.getExtensions()
    me.cachedExtensionTypes = me.getExtensionTypes()
    
    tbgl_destroyWindow
  end function
  
  '
  
  function Vendor() as string
    return me.cachedVendor
  end function
  
  function Renderer() as string
    return me.cachedRenderer
  end function

  function APIVersion() as string
    return me.cachedApiVersion
  end function
  
  function Extensions() as string
    return me.cachedExtensions
  end function

  function ExtensionTypes() as string
    return me.cachedExtensionTypes
  end function
  
  function ExtensionsOfType(extensionType as string) as string
    long i
    string extensions()
    parse(me.cachedExtensions, extensions, ",")
    
    string output
    for i = 1 to countOf(extensions)
      if parse$(extensions(i), "_", 2) = extensionType then
        output += extensions(i) + "," 
      end if
    next
    output = rtrim$(output, ",")
    
    return output
  end function
  
end type
